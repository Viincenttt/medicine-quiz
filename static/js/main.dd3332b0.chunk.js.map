{"version":3,"sources":["components/Question/Question.js","services/QuestionGenerator.js","components/Submit/Submit.js","containers/App.js","serviceWorker.js","index.js"],"names":["Question","props","question","answerList","allAnswers","map","answer","index","key","questionNumber","id","type","name","value","onChange","onAnswerClick","htmlFor","text","QuestionGenerator","getRandomElementFromArray","array","Math","floor","random","length","shuffleArray","i","j","temp","getDistinctValues","concat","apply","filter","self","indexOf","getAllSideEffects","allSideEffects","medicines","x","sideEffects","getAllMedicineBrands","brandName","generateAnswers","correctAnswers","allPossibleAnswers","minimumNumberOfAnswers","randomAnswer","includes","push","generateRandomSideEffectsQuestion","randomMedicine","generateRandomMedicineBrandsQuestion","medicinesWithBrandName","generateQuestion","Submit","result","onClick","onSubmitAnswers","hasSubmittedAnswers","join","chosenAnswersAreCorrect","onNextQuestionClick","App","state","chosenAnswers","generateNewQuestion","generatedQuestion","setState","e","chosenAnswer","currentTarget","checked","splice","this","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"w6SAiCeA,MA9Bf,SAAmBC,GACjB,GAAuB,OAAnBA,EAAMC,SACR,MAAO,GAGT,IAAMC,EAAaF,EAAMC,SAASE,WAAWC,KAAI,SAACC,EAAQC,GACxD,OACE,wBAAIC,IAAKP,EAAMQ,eAAiB,IAAMF,GACpC,2BACEG,GAAIT,EAAMQ,eAAiB,IAAMF,EACjCI,KAAK,WACLC,KAAK,sBACLC,MAAOP,EACPQ,SAAUb,EAAMc,gBAElB,2BAAOC,QAASf,EAAMQ,eAAiB,IAAMF,GAC1CD,OAMT,OACE,6BACE,4BAAKL,EAAMC,SAASe,MACpB,4BAAKd,K,OC0DIe,E,iDAnFbC,0BAA4B,SAACC,GAC3B,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,U,KAGhDC,aAAe,SAACL,GACd,IAAK,IAAIM,EAAIN,EAAMI,OAAS,EAAGE,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIN,KAAKC,MAAMD,KAAKE,UAAYG,EAAI,IACpCE,EAAOR,EAAMM,GACjBN,EAAMM,GAAKN,EAAMO,GACjBP,EAAMO,GAAKC,EAGb,OAAOR,G,KAGTS,kBAAoB,SAACT,GAMnB,MALkB,GAAGU,OAAOC,MAAM,GAAIX,GACLY,QAAO,SAACnB,EAAON,EAAO0B,GACrD,OAAOA,EAAKC,QAAQrB,KAAWN,M,KAMnC4B,kBAAoB,WAClB,IAAMC,EAAiB,GAAGN,OAAOC,MAAM,GAAIM,EAAUhC,KAAI,SAACiC,GAAD,OAAOA,EAAEC,gBAClE,OAAO,EAAKV,kBAAkBO,I,KAGhCI,qBAAuB,WACrB,OAAO,EAAKX,kBAAkBQ,EAC3BL,QAAO,SAAAM,GAAC,OAAU,OAANA,KACZjC,KAAI,SAACiC,GAAD,OAAOA,EAAEG,e,KAIlBC,gBAAkB,SAACC,EAAgBC,EAAoBC,GAErD,IADA,IAAMzC,EAAU,YAAOuC,GAChBvC,EAAWoB,OAASqB,GAAwB,CACjD,IAAMC,EAAe,EAAK3B,0BAA0ByB,GACrBxC,EAAW2C,SAASD,IAGjD1C,EAAW4C,KAAKF,GAIpB,OAAO1C,G,KAGT6C,kCAAoC,WAClC,IAAMC,EAAiB,EAAK/B,0BAA0BkB,GAChDjC,EAAa,EAAKsC,gBAAgBQ,EAAeX,YAAa,EAAKJ,oBAAqB,IAE9F,MAAO,CACLlB,KAAK,+BAAD,OAAiCiC,EAAetC,KAAhD,KACJ+B,eAAgBO,EAAeX,YAC/BnC,WAAY,EAAKqB,aAAarB,K,KAIlC+C,qCAAuC,WACrC,IAAMC,EAAyBf,EAAUL,QAAO,SAAAM,GAAC,OAAoB,OAAhBA,EAAEG,aACjDS,EAAiB,EAAK/B,0BAA0BiC,GAChDhD,EAAa,EAAKsC,gBAAgB,CAACQ,EAAeT,WAAY,EAAKD,uBAAwB,GAEjG,MAAO,CACLvB,KAAK,uBAAD,OAAyBiC,EAAetC,KAAxC,KACJ+B,eAAgB,CAACO,EAAeT,WAChCrC,WAAY,EAAKqB,aAAarB,K,KAIlCiD,iBAAmB,WAEjB,OADehC,KAAKE,SACP,GACJ,EAAK0B,oCAGP,EAAKE,yCC5DDG,MApBf,SAAgBrD,GACZ,IAAIsD,EAAU,4BAAQC,QAASvD,EAAMwD,iBAAvB,aACd,GAAIxD,EAAMyD,oBAAqB,CAC7B,IAAMf,EAAiB1C,EAAMC,SAASyC,eAAegB,KAAK,MAC1DJ,EACE,6BACE,2BACGtD,EAAM2D,wBACL,yBADD,uDAEiDjB,IAGpD,4BAAQa,QAASvD,EAAM4D,qBAAvB,mBAKN,OAAON,GCgEIO,G,kNA5EbC,MAAQ,CACN7D,SAAU,KACV8D,cAAe,GACfN,qBAAqB,EACrBE,yBAAyB,EACzBnD,eAAgB,G,EAGlBwD,oBAAsB,WACpB,IACMC,GADoB,IAAIhD,GACcmC,mBAE5C,EAAKc,SAAS,CACZjE,SAAUgE,EACVF,cAAe,GACfN,qBAAqB,EACrBE,yBAAyB,EACzBnD,eAAgB,EAAKsD,MAAMtD,eAAiB,K,EAIhDM,cAAgB,SAACqD,GACf,IAAMC,EAAeD,EAAEE,cAAczD,MAC/BmD,EAAa,YAAO,EAAKD,MAAMC,eAEjCI,EAAEE,cAAcC,QAClBP,EAAchB,KAAKqB,GAGnBL,EAAcQ,OAAOR,EAAc9B,QAAQmC,GAAe,GAG5D,EAAKF,SAAS,CAACH,cAAeA,K,EAGhCH,oBAAsB,WACpB,EAAKI,uB,EAGPR,gBAAkB,WAChB,IADsB,EAClBG,EAA0B,EAAKG,MAAMC,cAAcxC,SAAW,EAAKuC,MAAM7D,SAASyC,eAAenB,OAD/E,cAEK,EAAKuC,MAAMC,eAFhB,IAEtB,2BAAqD,CAAC,IAA3CK,EAA0C,QAC9C,EAAKN,MAAM7D,SAASyC,eAAeI,SAASsB,KAC/CT,GAA0B,IAJR,8BAQtB,EAAKO,SAAS,CACZP,wBAAyBA,EACzBF,qBAAqB,K,kEAKvBe,KAAKR,wB,+BAIL,OACE,yBAAKS,UAAU,gBACb,kBAAC,EAAD,CACExE,SAAUuE,KAAKV,MAAM7D,SACrBO,eAAgBgE,KAAKV,MAAMtD,eAC3BM,cAAe0D,KAAK1D,gBAEtB,kBAAC,EAAD,CACEb,SAAUuE,KAAKV,MAAM7D,SACrBwD,oBAAqBe,KAAKV,MAAML,oBAChCE,wBAAyBa,KAAKV,MAAMH,wBACpCC,oBAAqBY,KAAKZ,oBAC1BJ,gBAAiBgB,KAAKhB,uB,GAvEdkB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dd3332b0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Question.css\";\r\n\r\nfunction Question (props) {\r\n  if (props.question === null) {\r\n    return \"\";\r\n  }\r\n\r\n  const answerList = props.question.allAnswers.map((answer, index) => {\r\n    return (\r\n      <li key={props.questionNumber + \"_\" + index}>\r\n        <input\r\n          id={props.questionNumber + \"_\" + index}\r\n          type=\"checkbox\"\r\n          name=\"side-effect-answers\"\r\n          value={answer}\r\n          onChange={props.onAnswerClick}\r\n        />\r\n        <label htmlFor={props.questionNumber + \"_\" + index}>\r\n          {answer}\r\n        </label>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h2>{props.question.text}</h2>\r\n      <ul>{answerList}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Question;\r\n","import medicines from './medicine-data.json';\r\n\r\nclass QuestionGenerator { \r\n  getRandomElementFromArray = (array) => {\r\n    return array[Math.floor(Math.random() * array.length)];\r\n  };\r\n\r\n  shuffleArray = (array) => {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n\r\n    return array;\r\n  };\r\n\r\n  getDistinctValues = (array) => {\r\n    const allValues = [].concat.apply([], array);\r\n    const distinctValues = allValues.filter((value, index, self) => {\r\n      return self.indexOf(value) === index;\r\n    });\r\n\r\n    return distinctValues;\r\n  };\r\n\r\n  getAllSideEffects = () => {\r\n    const allSideEffects = [].concat.apply([], medicines.map((x) => x.sideEffects));\r\n    return this.getDistinctValues(allSideEffects);\r\n  };\r\n\r\n  getAllMedicineBrands = () => {\r\n    return this.getDistinctValues(medicines\r\n      .filter(x => x !== null)\r\n      .map((x) => x.brandName)\r\n    );\r\n  };\r\n\r\n  generateAnswers = (correctAnswers, allPossibleAnswers, minimumNumberOfAnswers) => {\r\n    const allAnswers = [...correctAnswers];\r\n    while (allAnswers.length < minimumNumberOfAnswers) {\r\n      const randomAnswer = this.getRandomElementFromArray(allPossibleAnswers);\r\n      const isAnswerAlreadyInArray = allAnswers.includes(randomAnswer);\r\n\r\n      if (!isAnswerAlreadyInArray) {\r\n        allAnswers.push(randomAnswer);\r\n      }\r\n    }\r\n\r\n    return allAnswers;\r\n  };\r\n\r\n  generateRandomSideEffectsQuestion = () => {\r\n    const randomMedicine = this.getRandomElementFromArray(medicines);\r\n    const allAnswers = this.generateAnswers(randomMedicine.sideEffects, this.getAllSideEffects(), 10);\r\n\r\n    return {\r\n      text: `Wat zijn de bijeffecten van ${randomMedicine.name}?`,\r\n      correctAnswers: randomMedicine.sideEffects,\r\n      allAnswers: this.shuffleArray(allAnswers),\r\n    };\r\n  };\r\n\r\n  generateRandomMedicineBrandsQuestion = () => {\r\n    const medicinesWithBrandName = medicines.filter(x => x.brandName !== null);\r\n    const randomMedicine = this.getRandomElementFromArray(medicinesWithBrandName);\r\n    const allAnswers = this.generateAnswers([randomMedicine.brandName], this.getAllMedicineBrands(), 5);\r\n    \r\n    return {\r\n      text: `Wat is het merk van ${randomMedicine.name}?`,\r\n      correctAnswers: [randomMedicine.brandName],\r\n      allAnswers: this.shuffleArray(allAnswers),\r\n    };\r\n  };\r\n\r\n  generateQuestion = () => {\r\n    const chance = Math.random();\r\n    if (chance < 0.7) {\r\n      return this.generateRandomSideEffectsQuestion();\r\n    }\r\n\r\n    return this.generateRandomMedicineBrandsQuestion();\r\n  };\r\n}\r\n\r\nexport default QuestionGenerator;","import React from 'react';\r\n\r\nfunction Submit(props) {\r\n    let result = (<button onClick={props.onSubmitAnswers}>Inleveren</button>);\r\n    if (props.hasSubmittedAnswers) {\r\n      const correctAnswers = props.question.correctAnswers.join(', ');\r\n      result = (\r\n        <div>\r\n          <p>\r\n            {props.chosenAnswersAreCorrect ? \r\n              'Het antwoord was goed!' : \r\n              `Het antwoord is fout, het goede antwoord is: ${correctAnswers}` \r\n            }\r\n          </p>\r\n          <button onClick={props.onNextQuestionClick}>Volgende vraag</button>\r\n        </div>\r\n      );    \r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport default Submit;","import React from 'react';\nimport Question from '../components/Question/Question';\nimport QuestionGenerator from '../services/QuestionGenerator';\nimport Submit from '../components/Submit/Submit';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    question: null,\n    chosenAnswers: [],\n    hasSubmittedAnswers: false,\n    chosenAnswersAreCorrect: false,\n    questionNumber: 0\n  };\n\n  generateNewQuestion = () => {\n    const questionGenerator = new QuestionGenerator();\n    const generatedQuestion = questionGenerator.generateQuestion();\n\n    this.setState({\n      question: generatedQuestion,\n      chosenAnswers: [],\n      hasSubmittedAnswers: false,\n      chosenAnswersAreCorrect: false,\n      questionNumber: this.state.questionNumber + 1\n    });\n  };\n\n  onAnswerClick = (e) => {\n    const chosenAnswer = e.currentTarget.value;\n    const chosenAnswers = [...this.state.chosenAnswers];\n\n    if (e.currentTarget.checked) {\n      chosenAnswers.push(chosenAnswer);\n    }\n    else {\n      chosenAnswers.splice(chosenAnswers.indexOf(chosenAnswer), 1);\n    }\n    \n    this.setState({chosenAnswers: chosenAnswers});\n  };\n\n  onNextQuestionClick = () => {\n    this.generateNewQuestion();\n  };\n\n  onSubmitAnswers = () => {\n    let chosenAnswersAreCorrect = this.state.chosenAnswers.length === this.state.question.correctAnswers.length;\n    for (const chosenAnswer of this.state.chosenAnswers) {\n      if (!this.state.question.correctAnswers.includes(chosenAnswer)) {\n        chosenAnswersAreCorrect = false;\n      }\n    }\n\n    this.setState({ \n      chosenAnswersAreCorrect: chosenAnswersAreCorrect,\n      hasSubmittedAnswers: true\n    });\n  };\n\n  componentDidMount() {    \n    this.generateNewQuestion();\n  };  \n\n  render() {\n    return (\n      <div className=\"main-content\">\n        <Question \n          question={this.state.question}\n          questionNumber={this.state.questionNumber}\n          onAnswerClick={this.onAnswerClick} />\n\n        <Submit \n          question={this.state.question}\n          hasSubmittedAnswers={this.state.hasSubmittedAnswers}\n          chosenAnswersAreCorrect={this.state.chosenAnswersAreCorrect}\n          onNextQuestionClick={this.onNextQuestionClick}\n          onSubmitAnswers={this.onSubmitAnswers} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}